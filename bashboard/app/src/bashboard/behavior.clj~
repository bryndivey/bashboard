(ns ^:shared bashboard.behavior
    (:require [clojure.string :as string]
              [io.pedestal.app :as app]
              [io.pedestal.app.messages :as msg]))


;; transforms

(defn set-value-transform [old-value message]
  (:value message))

(defn append-value-transform [old-value message]
  ((fnil conj []) old-value (:value message)))

(defn empty-vector-transform [_ _]
  [])

;; emitters

(defn init-main [_]
  [[:transform-enable [:main :sites] :append-value [{msg/topic [:sites]}]]
   [:transform-enable [:main :sites] :empty-vector [{msg/topic [:sites]}]]])

(def example-app
  ;; There are currently 2 versions (formats) for dataflow
  ;; description: the original version (version 1) and the current
  ;; version (version 2). If the version is not specified, the
  ;; description will be assumed to be version 1 and an attempt
  ;; will be made to convert it to version 2.
  {:version 2
   :transform [[:set-value [:greeting] set-value-transform]
               [:append-value [:sites] append-value-transform]
               [:empty-vector [:sites] empty-vector-transform]]

   :emit [{:init init-main}
          [#{[:*]} (app/default-emitter [:main])]]})


(comment
  ;; The examples below show the signature of each type of function
  ;; that is used to build a behavior dataflow.

  ;; transform

  (defn example-transform [old-state message]
    ;; returns new state
    )

  ;; derive

  (defn example-derive [old-state inputs]
    ;; returns new state
    )

  ;; emit

  (defn example-emit [inputs]
    ;; returns rendering deltas
    )

  ;; effect

  (defn example-effect [inputs]
    ;; returns a vector of messages which effect the outside world
    )

  ;; continue

  (defn example-continue [inputs]
    ;; returns a vector of messages which will be processed as part of
    ;; the same dataflow transaction
    )

  ;; dataflow description reference

  {:transform [[:op [:path] example-transform]]
   :derive    #{[#{[:in]} [:path] example-derive]}
   :effect    #{[#{[:in]} example-effect]}
   :continue  #{[#{[:in]} example-continue]}
   :emit      [[#{[:in]} example-emit]]}
  )
